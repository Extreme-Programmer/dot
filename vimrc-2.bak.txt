"Shows an exhaustive list during tab completion
set wildmode=longest,list,full
set wildmenu
" Ignore files
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=**/coverage/*
set wildignore+=**/node_modules/*
set wildignore+=**/android/*
set wildignore+=**/ios/*
set wildignore+=**/.git/*

" removes annoying error sound
set noerrorbells

set scrolloff=10 "Smooth scrolling at the bottom

" While over the incorrect work in normal mode :z=1 to see suggestions
"[s and ]s to go navigate through misspelled word
set spell spelllang=en_us

" Set internal encoding of vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden
" Some servers have issues with backup files
set nobackup
set nowritebackup

" Give more space for displaying messages.
" Remove the messages that pop up at the bottom
" set shortmess=a
" set cmdheight=2


" vnoremap <C-c><C-c> :<c-u>silent '<,'>write !xsel -b<cr>


set number
" set textwidth=120

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=50

" Don't pass messages to |ins-completion-menu|.
" set shortmess+=c

" set formatoptions-=c formatoptions-=r formatoptions-=o " To stop comments from continuing 
set tabstop=4 softtabstop=4 shiftwidth=4
set expandtab
set smartindent
set smartcase
set incsearch
set hlsearch
set ic " case insensitive search
set foldmethod=indent
set foldlevel=99

" Install VimPlug from - https://github.com/junegunn/vim-plug
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin('~/.vim/plugged')
call plug#end()

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"Comfortable motion scrolling params
let g:comfortable_motion_friction = 80.0
let g:comfortable_motion_air_drag = 12.0

" MarkdownPreview settings
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 1
let g:mkdp_refresh_slow = 0
let g:mkdp_command_for_global = 0
let g:mkdp_open_to_the_world = 0
let g:mkdp_open_ip = ''
let g:mkdp_browser = ''
let g:mkdp_echo_preview_url = 0
let g:mkdp_browserfunc = ''
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1
    \ }
let g:mkdp_markdown_css = ''
let g:mkdp_highlight_css = ''
let g:mkdp_port = ''
let g:mkdp_page_title = '「${name}」'

" set statusline=%<%f\ %h%m%r%{FugitiveStatusline()}%=%-14.(%l,%c%V%)\ %P
let g:gitgutter_async=0

let ostype = substitute(system('uname'), "\n", "", "")

set cursorline
set t_Co=256
if ostype == "Darwin"
  colorscheme one
  set termguicolors
else
  set t_ut=
  colorscheme onehalfdark
  highlight Comment gui=none cterm=none
  let g:airline_theme='onehalfdark'
endif

" Press Space to turn off highlighting and clear any message already displayed.
noremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>

" https://stackoverflow.com/questions/6488683/how-do-i-change-the-cursor-between-normal-and-insert-modes-in-vim
" Regular mode - block,  Insert mode - vertical line, Replace mode - _
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    let &t_SR =  "\<Esc>]50;CursorShape=2\x7"
endif

" map the leader key to space bar
let mapleader = " "


 "Search and replace -> %s/<targetWord><replaceWith>/gI
 "To replace visual block do [Shift][:]s/<targetWord>/<replaceWith><CR>
noremap <leader>sr :%s//gI<Left><Left><Left>

if ostype == "Linux"
   let python_highlight_all = 1
   let python_highlight_space_errors = 0
endif


" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)


" Disable autocomplete for specific file types
autocmd FileType python let b:coc_suggest_disable = 1
autocmd FileType Markdown let b:coc_suggest_disable = 1
autocmd FileType vim let b:coc_suggest_disable = 1

" For easy vertical navigation in markdown files
autocmd FileType markdown map j gj
autocmd FileType markdown map k gk

" Add  path to your node binary here - requirement for coc plugin
" Coc plugin also requires nmp for installing extension please refere to README on how to configure that 
" let g:coc_node_path = '$HOME/node-from-source/bin/node'


" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
      let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    inoremap <silent><expr> <Tab>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<Tab>" :
          \ coc#refresh()

"Tab to navigate completion list
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Trigger coc-autocomplete on pressing Enter
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"Correct colors for Coc Pmenus
hi Pmenu ctermbg=234 ctermfg=145
hi PmenuSel ctermbg=237  ctermfg=145



let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'



" Note: You must define the dictionary first before setting values.
" Also, it's a good idea to check whether it exists as to avoid 
" accidentally overwriting its contents.

if !exists('g:airline_symbols')
      let g:airline_symbols = {}
  endif

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = '☰'
  let g:airline_symbols.maxlinenr = ''
  let g:airline_symbols.dirty='⚡'

  " If you only see boxes here it may be because your system doesn't have
  " the correct fonts. Try it in vim first and if that fails see the help 
  " pages for vim-airline :help airline-troubleshooting

